<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on vaskir&#39;s blog</title>
    <link>https://vasily-kirichenko.github.io/blog/posts/</link>
    <description>Recent content in Posts on vaskir&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 27 Oct 2021 17:48:30 +0300</lastBuildDate><atom:link href="https://vasily-kirichenko.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Use the right tool for the job</title>
      <link>https://vasily-kirichenko.github.io/blog/posts/buf/</link>
      <pubDate>Wed, 27 Oct 2021 17:48:30 +0300</pubDate>
      
      <guid>https://vasily-kirichenko.github.io/blog/posts/buf/</guid>
      <description>The task: store N recent values with fast access to the oldest one. This is the definition of circular buffer, but we don&amp;rsquo;t want to implement it ourselves, so we try to use a slice:
const N = 1000 func BenchmarkSlice(b *testing.B) { b.ReportAllocs() var s []int for i := 0; i &amp;lt; N; i++ { s = append(s, i) } b.ResetTimer() for n := 0; n &amp;lt; b.N; n++ { for i := 0; i &amp;lt; 10*N; i++ { s = s[1:] s = append(s, i) } } } which performs not great, because the underlying array is constantly reallocated (O(log(n))?</description>
    </item>
    
  </channel>
</rss>
